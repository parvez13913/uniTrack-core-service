generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                         String                      @id @default(uuid())
  title                      String
  code                       String
  startMonth                 String
  endMonth                   String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  year                       Int
  isCurrent                  Boolean?                    @default(false)
  semesterRegistrations      SemesterRegistration[]
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  studentEnrolledCourses     StudentEnrolledCourse[]
  studentSemesterPayments    StudentSemesterPayment[]
  students                   Student[]

  @@map("acamemic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]
  students            Student[]
  faculties           Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFacultyId String
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  offeredCourses    OfferedCourse[]
  students          Student[]
  faculties         Faculty[]

  @@map("academic_departments")
}

model Student {
  id                                 String                              @id @default(uuid())
  studentId                          String
  firstName                          String
  middleName                         String?
  lastName                           String
  profileImage                       String?
  email                              String
  contactNo                          String
  gender                             String
  bloodGroup                         String
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  academicSemesterId                 String
  academicDepartmentId               String
  academicFacultyId                  String
  studentAcademicInfos               StudentAcademicInfo[]
  studentEnrolledCourseMarks         StudentEnrolledCourseMark[]
  studentEnrolledCourses             StudentEnrolledCourse[]
  studentSemesterPayments            StudentSemesterPayment[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty                    AcademicFaculty                     @relation(fields: [academicFacultyId], references: [id])
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String?
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String

  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId           String
  courses                     CourseFaculty[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  buildingId                  String
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  building                    Building                     @relation(fields: [buildingId], references: [id])

  @@map("rooms")
}

model Course {
  id                     String                  @id @default(uuid())
  title                  String
  code                   String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  credits                Int                     @default(0)
  prerequisite           CourseToPrereqisite[]   @relation("CourseToPrerequistite")
  prerequisiteFor        CourseToPrereqisite[]   @relation("PrerequisiteToCourse")
  faculties              CourseFaculty[]
  offeredCourses         OfferedCourse[]
  studentEnrolledCourses StudentEnrolledCourse[]

  @@map("courses")
}

model CourseToPrereqisite {
  courseId       String
  prerequisiteId String
  course         Course @relation("CourseToPrerequistite", fields: [courseId], references: [id])
  prerequistite  Course @relation("PrerequisiteToCourse", fields: [prerequisiteId], references: [id])

  @@id([courseId, prerequisiteId])
}

model CourseFaculty {
  courseId  String
  facultyId String
  course    Course  @relation(fields: [courseId], references: [id])
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("courseFaculties")
}

model SemesterRegistration {
  id                                 String                              @id @default(uuid())
  startDate                          DateTime
  endDate                            DateTime
  status                             SemesterRegistrationStatus?         @default(UPCOMING)
  minCredit                          Int                                 @default(0)
  maxCredit                          Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  academicSemesterId                 String
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  offeredCourseSections              OfferedCourseSection[]
  offeredCourses                     OfferedCourse[]
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentSemesterRegistrations       StudentSemesterRegistration[]

  @@map("semester_registrations")
}

model OfferedCourse {
  id                                 String                              @id @default(uuid())
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  courseId                           String
  academicDepartmentId               String
  semesterRegistrationId             String
  offeredCourseSections              OfferedCourseSection[]
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  course                             Course                              @relation(fields: [courseId], references: [id])
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                                 String                              @id @default(uuid())
  title                              String
  maxCapacity                        Int
  currentlyEnrolledStudent           Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  offeredCourseId                    String
  semesterRegistrationId             String
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  offeredCourse                      OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  semesterRegistrationId String
  roomId                 String
  facultyId              String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  room                   Room                 @relation(fields: [roomId], references: [id])
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  faculties              Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  student                Student              @relation(fields: [studentId], references: [id])

  @@map("student_semester_registrations")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  studentId              String
  offeredCourseId        String
  offeredCourseSectionId String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  student                Student              @relation(fields: [studentId], references: [id])

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}

model StudentEnrolledCourse {
  id                         String                       @id @default(uuid())
  courseId                   String
  academicSemesterId         String
  grade                      String?
  point                      Float?                       @default(0)
  totalMarks                 Int?                         @default(0)
  status                     StudentEnrolledCourseStatus? @default(ONGOING)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  studentId                  String
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  academicSemester           AcademicSemester             @relation(fields: [academicSemesterId], references: [id])
  course                     Course                       @relation(fields: [courseId], references: [id])
  student                    Student                      @relation(fields: [studentId], references: [id])

  @@map("student_enrolled_courses")
}

model StudentEnrolledCourseMark {
  id                      String                @id @default(uuid())
  studentId               String
  studentEnrolledCourseId String
  academicSemesterId      String
  grade                   String?
  marks                   Int?
  examType                ExamType?             @default(MIDTERM)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  academicSemester        AcademicSemester      @relation(fields: [academicSemesterId], references: [id])
  studentEnrolledCourse   StudentEnrolledCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  student                 Student               @relation(fields: [studentId], references: [id])

  @@map("student_enrolled_course_marks")
}

model StudentSemesterPayment {
  id                   String           @id @default(uuid())
  studentId            String
  academicSemesterId   String
  fullPaymentAmount    Int?             @default(0)
  partialPaymentAmount Int?             @default(0)
  totalPaidAmount      Int?             @default(0)
  paymentStatus        PaymentStatus?   @default(PENDING)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  totalDueAmount       Int?             @default(0)
  academicSemester     AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  student              Student          @relation(fields: [studentId], references: [id])

  @@map("student_semester_payments")
}

model StudentAcademicInfo {
  id                   String   @id @default(uuid())
  studentId            String
  totalCompletedCredit Int?     @default(0)
  cgpa                 Float?   @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  student              Student  @relation(fields: [studentId], references: [id])

  @@map("student_academic_infos")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum ExamType {
  MIDTERM
  FINAL
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}
